/*
 * Lab 3.c
 *
 * Created: 25.02.2020 14:38:18
 * Author : Gina
 */ 
 
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <stdio.h>

/* UART Code */
int uart_putchar(char c, FILE *stream);
int uart_getchar(FILE *stream);
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
	return 0;
}
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
	return UDR0;
}
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
	stdout = &mystdout;
	stdin = &mystdin;
}


void init_hardware(void)
{
	//configure the pins
	DDRB |= (1<<PORTB0) | (0<<PORTB1) | (0<<PORTB2)| (0<<PORTB3)| (0<<PORTB4);
	DDRD |= (1<<PORTD6) | (1<<PORTD7);
	
	//Next, you might want to use built-in pull-up resistors. For example if we
	//decide PINDB2 and PINB3 are inputs, you could enable pull-ups with:
	PORTB = (1<<PORTB0);
	PORTD = (1<<PORTD6) | (1<<PORTD7);
}

void set_row_low(unsigned int row)
{
	//This code should set a single pin LOW associated with the passed row. Ensure only a single pin goes low.
	
	if (row = 0){
		PORTB &= ~(1<<PORTB4);
	}
	
	if (row = 1){
		PORTB &= ~(1<<PORTB3);
	}
	
	if (row = 2){
		PORTB &= ~(1<<PORTB2);
	}
	
	if (row = 3){
		PORTB &= ~(1<<PORTB1);
	}

}

int col_pushed(void) //return which column was detected
{
	// 1) We need to mask off such we only get the bit we care about.
	// 2) We need to detect the LOW state (as we are setting the row to be LOW)
	
	if ((PINB & (1<<PINB0)) == 0){ // check if PINB0 is low
	    return 1;
	}
	if ((PINB & (1<<PINB1)) == 0){ // check if PINB1 is low
		return 1;
	}
	if ((PINB & (1<<PINB2)) == 0){ // check if PINB2 is low
		return 1;
	}
	if ((PINB & (1<<PINB3)) == 0){ // check if PINB3 is low
		return 1;
	}
}

//An easy way to map the XY location is a lookup table.
//You'll need to fill this in - you might need to figure out
//if mirrored etc or something funky.
char buttons[4][3] = {{'1', '2', '3'},
					  {'4', '5', '6'},
					  {'7', '8', '9'},
					  {'*', '0', '#'}};

char get_button(void)
{
	//Use the scanning example from main_test_1()
	//to build a simple code that scans and waits for
	//a button press. Return the character pressed.
	
	for(int row = 0; row < 4; row++){
		set_row_low(row);
		_delay_ms(20);
		
		int col = col_pushed();
		
		if(col){
			printf("%d-%d: %c\n", row, col, buttons[row][col-1]);
			_delay_ms(500);
		}
	}
}

char get_new_button(void)
{
	static char last_button;
	char b = get_button();
	
	//Check if we held button down
	if(b == last_button) return 0;
	
	last_button = b;
	
	return b;
}

int main(void){
	init_hardware();
	init_uart(); // initialization
	printf("System Booted, built %s on %s\n", __TIME__, __DATE__);
	printf("Simple button test to help build your map\n");
	
	while(1){
		
		for(int row = 0; row < 4; row++){
			set_row_low(row);
			_delay_ms(20);
			
			int col = col_pushed();
			
			if(col){
				printf("%d-%d: %c\n", row, col, buttons[row][col-1]);
				_delay_ms(500);
			}
		}
	}
}

int main_test_2(void){
	init_hardware();
	init_uart(); // initialization
	printf("System Booted, built %s on %s\n", __TIME__, __DATE__);
	
	char last_button = 0;
	while(1){
		

		char b = get_button();

		if(b){
			if(b != last_button){
				printf("Pushed %c\n", b);
			}
			} else if (last_button) {
			printf("Released\n");
		}
		last_button = b;
	}
}

int main_test_3(void){
	init_hardware();
	init_uart(); // initialization
	printf("System Booted, built %s on %s\n", __TIME__, __DATE__);
	
	while(1){
		char b = get_new_button();
		
		if(b){
			printf("Button: %c\n", b);
		}
	}
}

int main_test_4(void){
	init_hardware();
	init_uart(); // initialization
	printf("System Booted, built %s on %s\n", __TIME__, __DATE__);
	
	char pin[10];
	int i = 0;
	
	while(1){
		char b = get_new_button();
		
		//Do something special with "#", for example clear partial entry
		if(b == '#'){
			i = 0;
			continue;
		}
		
		if(b){
			pin[i++] = b;
		}
		
		if(i >= 4){
			pin[4] = 0;
			printf("Entered PIN: %s\n", pin);
			i = 0;
		}
		
	}
}
